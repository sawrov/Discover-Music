
import java.awt.Color;
import java.util.Arrays;
import javax.swing.JTable;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
public class DiscoverMusic extends javax.swing.JFrame {
    
    String [] notes = {"C","C#","D","D#","E","F","F#","G","G#","A","A#","B"};
    int [] major = {0,2,4,5,7,9,11};
    int [] minor = {0,2,3,5,7,8,10};
    int [] major2 = {0,1,4,5,7,8,10};
    int [] major3 = {0,2,4,6,7,9,11};
    int [] major4 = {0,2,4,6,7,9,10};
    int [] major5 = {0,2,4,5,7,8,10};
    int [] major6 = {0,1,4,5,7,8,11};
    int [] major7 = {0,2,4,5,7,9,10};
    int [] major8 = {0,2,3,6,7,8,11};
    int [] major9 = {0,2,3,5,7,8,11};
    int [] major10 = {0,2,3,5,7,9,11};
    int [] major11 = {0,2,3,5,7,9,10};
    int [] major12 = {0,1,3,5,7,8,10};
    int [] major13 = {0,2,3,5,7,9,11};
    int [] major14 = {0,1,3,5,7,9,10};
    
   


//    int [] harmonic_minor = {0,2,3,5,7,8,11};
//    int [] melodic_minor_asc = {0,2,3,5,7,9,11};
//    int [] melodic_minor_des = {0,2,3,5,7,8,10};
//    int [] gipsy_major = {0,1,4,5,7,8,11};
//    int [] gipsy_minor = {0,2,3,6,7,8,11};
//    int [] whole_tone = {0,2,4,6,8,10};
//    int [] pentatonic_major = {0,2,4,7,9};
//    int [] pentatonic_hemitonic = {0,2,3,7,8};
//    int [] pentatonic_minor = {0,3,5,7,9};
//    int [] hexachordal = {0,2,4,5,7,9};
//    int [] moorish = {0,1,3,4,6,7,9,11};
//    int [] chinease = {0,2,4,6,8,9,11};
//    int [] wollet = {0,1,4,5,6,9,10};
//    int [] nepolitant_minor_asc = {0,1,3,5,7,8,11};
//    int [] nepolitant_minor_des = {0,10,7,8,5,3,1};
//    int [] blues = {0,3,5,6,7,10};
//    int [] Lydian_dominent = {0,2,4,6,7,9,10};
//    int [] blues_minor = {0,2,3,5,6,7,8,10};
//    int [] blues_major = {0,2,3,4,5,6,7,9,10};
    //int [] dorian = {}
    int [] scale = null;
    String[][] modtable;
    String[][] currentmodtable;
    String[][] progressiontable;
    String[][] currentprogressiontable;
    String[] Checker;
    String[] scales = { "Major", "Minor","Major2","Major3","Major4","Major5","Major6","Major7","Major8","Major9","Major10","Major11","Major12","Major13","Major14"};         
    int length = scales.length;
    String [] roots = new String[length]; 
    String[][] root_table;
    String displayroots = " ";
    /**
     * Creates new form DiscoverMusic
     */
    public DiscoverMusic() {
        initComponents();
        //scale_selector.setSize(15, 25);


    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        Scale = new javax.swing.JLabel();
        Generate = new javax.swing.JButton();
        scale_selector = new javax.swing.JComboBox();
        scale_selector = new javax.swing.JComboBox(scales);
        jLabel1 = new javax.swing.JLabel();
        Key = new javax.swing.JTextField();
        calculate_root = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        display_table = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        viewprogressiontable = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        display_chords = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Main"));

        Scale.setText("Scale");

        Generate.setText("Generate Tables");
        Generate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GenerateActionPerformed(evt);
            }
        });

        jLabel1.setText("Enter Key");

        Key.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                KeyActionPerformed(evt);
            }
        });

        calculate_root.setText("Calculate Root");
        calculate_root.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calculate_rootActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(Generate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(Scale, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(scale_selector, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(0, 0, Short.MAX_VALUE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Key, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(calculate_root, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Scale, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(scale_selector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Generate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 39, Short.MAX_VALUE)
                    .addComponent(Key, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(calculate_root)
                .addGap(18, 18, 18))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Mod Table"));

        display_table.setAutoCreateRowSorter(true);
        display_table.setBackground(new java.awt.Color(204, 255, 204));
        display_table.setForeground(new java.awt.Color(153, 255, 153));
        display_table.setModel(new javax.swing.table.DefaultTableModel(
            new String [][] {

            },
            new String [] {"1","2","3","4","5","6","7"

            }
        ));
        display_table.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        display_table.setColumnSelectionAllowed(false);
        display_table.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        display_table.setEnabled(false);
        display_table.setFillsViewportHeight(true);
        display_table.setGridColor(new java.awt.Color(153, 153, 255));
        display_table.setIgnoreRepaint(true);
        display_table.setShowGrid(true);
        jScrollPane1.setViewportView(display_table);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 271, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Progression Table"));

        viewprogressiontable.setAutoCreateRowSorter(true);
        viewprogressiontable.setBackground(new java.awt.Color(153, 153, 255));
        viewprogressiontable.setForeground(new java.awt.Color(153, 255, 153));
        viewprogressiontable.setModel(new javax.swing.table.DefaultTableModel(
            new String [][] {

            },
            new String [] {"1","2","3","4","5","6","7","8","9","10","11","12"

            }
        ));
        viewprogressiontable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        viewprogressiontable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        viewprogressiontable.setFillsViewportHeight(true);
        viewprogressiontable.setGridColor(new java.awt.Color(153, 204, 255));
        viewprogressiontable.setIntercellSpacing(new java.awt.Dimension(4, 4));
        viewprogressiontable.setMaximumSize(new java.awt.Dimension(12, 12));
        viewprogressiontable.setName(""); // NOI18N
        jScrollPane2.setViewportView(viewprogressiontable);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 557, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 271, Short.MAX_VALUE)
                .addContainerGap())
        );

        display_chords.setColumns(20);
        display_chords.setRows(5);
        jScrollPane3.setViewportView(display_chords);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 801, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 200, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void GenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GenerateActionPerformed
        // TODO add your handling code here:
       // scale_selector = new JComboBox(petStrings);
        calculate_root.enable();
        String Choice = (String)scale_selector.getSelectedItem();
        setcurrentscale(Choice); 
        currentmodtable = generatemodtable(scale);
        int count = scale.length;
        generateprogressiontable(currentmodtable,count);
        displayinmodtable(count,count,currentmodtable);
        displayinprogressiontable(count,currentprogressiontable);
    }//GEN-LAST:event_GenerateActionPerformed

    private void KeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_KeyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_KeyActionPerformed

    private void calculate_rootActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calculate_rootActionPerformed
        // TODO add your handling code here:
        String key = Key.getText();
        if(key.length()<3 && key.length()>0)
        {
            String checker = key.substring(0, 1);
            if(key.length()<2)
            {
                key = key+" ";
            
            }
            calculate_root.disable();
            calculateroot(key);
            System.out.println(key);
            System.out.println(displayroots);
            display_chords.setText(displayroots);
            jScrollPane3.setViewportView(display_chords);
            setcurrentscale((String)scale_selector.getSelectedItem());
            generatemodtable(scale);
            generateprogressiontable(currentmodtable,length);

            //jScrollPane4.setViewportView(list_chords);
            //String[] column = {"Scale","Root"};
           // table_root = new JTable(root_table,column);
           // jScrollPane3.setViewportView(table_root);
//            display_table.setBackground(Color.LIGHT_GRAY);
//        display_table.setShowGrid(true);
//        display_table.setGridColor(Color.magenta);
            
            //TableColumn column1 = null;
            //column1 = table_root.getColumnModel().getColumn(0);
            //column1.setPreferredWidth(150);
            //table_root.setRowHeight(21);

            
            

        }
        //System.out.println(key);
       
    }//GEN-LAST:event_calculate_rootActionPerformed

    public void setcurrentscale (String Choice)
    {
        switch (Choice)
        {

            case "Minor": scale = minor; 
                break;
            case "Major": scale = major;
                break;
            case "Major2": scale = major2;
                break;
            case "Major3": scale = major3;
                break;
            case "Major4": scale = major4;
                break;
            case "Major5": scale = major5;
                break;
            case "Major6": scale = major6;
                break;
            case "Major7": scale = major7;
                break;
            case "Major8": scale = major8;
                break;
            case "Major9": scale = major9;
                break;
            case "Major10": scale = major10;
                break;
            case "Major11": scale = major11;
                break;
            case "Major12": scale = major12;
                break;
            case "Major13": scale = major13;
                break;
            case "Major14": scale = major14;
                break;
                
//            case "Melodic Minor Asc": scale = melodic_minor_asc;
//                break;
//            case "Harmonic Minor": scale = harmonic_minor;
//                break;
//            case "Melodic Minor Des": scale = melodic_minor_des; 
//                break;
//            case "Gipsy Major": scale = gipsy_major;
//                break;
//            case "Gipsy Minor": scale = gipsy_minor;
//                break;
//            case "Whole Tone": scale = whole_tone;
//                break;
//            case "Pentatonic Major": scale = pentatonic_major; 
//                break;
//            case "Pentatonic Minor": scale = pentatonic_minor;
//                break;
//            case "Pentatonic Hemitonic": scale = pentatonic_hemitonic;
//                break;
//            case "Hexachordal": scale = hexachordal; 
//                break;
//            case "Moorish": scale = moorish;
//                break;
//            case "Chinease": scale = chinease;
//                break;
//            case "Wollet": scale = wollet;
//                break;
//            case "Nepolitant Minor Asc": scale = nepolitant_minor_asc;
//                break;
//            case "Nepolitant Minor Des": scale = nepolitant_minor_des;
//                break;
//            case "Blues": scale = blues; 
//                break;
//            case "Lydian Dominant": scale = Lydian_dominent;
//                break;
//            case "Blues Minor": scale = blues_minor;
//                break;
//            case "Blues Major": scale = blues_major;
//                break;
            default: scale = major;
                break; 
        }
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DiscoverMusic.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DiscoverMusic.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DiscoverMusic.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DiscoverMusic.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new DiscoverMusic().setVisible(true);
        });
    }
    
    public String[][] generatemodtable(int[] Scale)
    {
        int count;
        count = Scale.length;
        int i = 0;
        int j = 0;
        int index;
        String[][] tempmod;
        currentmodtable = new String[count][count];
        for(i=0;i<count;i++)
        {
            //System.out.println();
            for(j=0;j<count;j++)
            {
                index = (i+j)%count;
                int temp = Scale[index];
                currentmodtable[i][j]=notes[temp];
                //modtable[i][j] = notes[major[((i+j)%count)]];
                //System.out.println(modtable[i][j]);
            }
        }  
        return currentmodtable;
    }
    public void generateprogressiontable(String[][] modtable, int column)
    {
        int i=column;
        int j;
        currentprogressiontable = new String[12][column];
        for(i=0;i<column;i++)
            {
               String temp;
               temp = modtable[i][0]+modtable[i][2]+modtable[i][4];
               int inc1 = Arrays.asList(notes).indexOf(modtable[i][0]);
               int inc2 = Arrays.asList(notes).indexOf(modtable[i][2]);
               int inc3 = Arrays.asList(notes).indexOf(modtable[i][4]);
               temp = formatString(notes[inc1],notes[inc2],notes[inc3]);
               currentprogressiontable[0][i]= temp;
               for(j=1;j<12;j++)
               {
                inc1++;
                inc2++;
                inc3++;
                String temp2;
                String a = notes[inc1%12];
                String b = notes[inc2%12];
                String c = notes[inc3%12];
                //System.out.println(formatString(a,b,c));
                //temp2 = notes[inc1%12]+notes[inc2%12]+notes[inc3%12];
                temp2 = formatString(a,b,c);
                currentprogressiontable[j][i] = temp2;
               }
            }
    }
    public void displayinmodtable(int column,int row,String[][] display_this)
    {
        String [] empty = new String[column];
        for(int i=0; i<column; i++)
        {
            empty[i]= " "+(i+1);
        }
        display_table = new JTable(display_this,empty);
        display_table.setBackground(Color.LIGHT_GRAY);
        display_table.setShowGrid(true);
        display_table.setGridColor(Color.magenta);
        jScrollPane1.setViewportView(display_table);
    }
    public void displayinprogressiontable(int column,String[][] display)
    {
        String [] empty = new String[column];
        for(int i=0; i<column; i++)
        {
            empty[i]= " "+(i+1);
        }
        //TableColumn column1 = null;
        viewprogressiontable = new JTable(display,empty);
        viewprogressiontable.setRowHeight(20);
        viewprogressiontable.setShowGrid(true);
        viewprogressiontable.setGridColor(Color.magenta);
//        column1 = viewprogressiontable.getColumnModel().getColumn(0);
//        column1.setBackground(Color.BLACK);
        
       // viewprogressiontable.edi
        //viewprogressiontable.setBackground(Color.green);
        jScrollPane2.setViewportView(viewprogressiontable);
    }
    public String formatString (String a, String b, String c)
    {
        String ret;
        if(a.length() > 1)
        {
            ret = a;
            if(b.length() >1)
            {
                ret+=b;
            }
            else
            {
                ret =ret +b+ " ";
            }
        }
        else
        {
            ret = a+" ";
            if(b.length() >1)
            {
                ret+=b;
            }
            else
            {
                ret =ret +b+ " ";
            }
        
        }
        ret+=c;
        return ret;    
    }
    public void calculateroot (String key)
    {
        for(int i=0; i<12; i++)
        {
            String temp = currentprogressiontable[i][0];
            String checker = temp.substring(0, 2);
            int column = currentprogressiontable[0].length;
                //System.out.println(key+"-"+checker);
                //System.out.println("This is me");
                //for(int i=0)
            Checker = new String[column];
            if(checker.equalsIgnoreCase(key))
                {
                    displayroots = (String)scale_selector.getSelectedItem()+"---";
                    for(int j=0;j<column;j++)
                    {
                         Checker[j] = currentprogressiontable[i][j];
                         displayroots = displayroots.concat("|"+Checker[j]+"|  ");
                         
                         //System.out.println(Checker[j]);
                         //System.out.println(displayroots);
                    }
                    displayroots = displayroots.concat("\n ___________________________________________________________\n");
                    discoverRows(Checker);
                    break;
                
                }
            
           
 
        }
        
    }
    public void discoverRows(String[] Check)
    {
        for(int i=0;i<length;i++)
        {
            //System.out.println("Iteration--" + i);
            setcurrentscale(scales[i]);
            generatemodtable(scale);
            generateprogressiontable(currentmodtable,scale.length);
            for (String Check1 : Check) {
                for (int k = 0; k<12; k++) {
                    //System.out.println(Check[j]+"=="+currentprogressiontable[k][0]);
                    //System.out.println("iteration" + j);
                    if (Check1.equals(currentprogressiontable[k][0])) {
                        displayroots = displayroots.concat("\n"+scales[i]+"---");
                    
                        for(int l=0;l<currentprogressiontable[0].length;l++)
                        {
                            displayroots = displayroots.concat("|"+currentprogressiontable[k][l]+"|  ");
                        }
                        displayroots = displayroots.concat("\n");
                        break;
                    }
                }
            }
            //displayroots = displayroots.concat(scales[i]+ "\n");
        
        }
        
    
    }
        
    
    //public void generateroot (String[][] modtable)

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Generate;
    private javax.swing.JTextField Key;
    private javax.swing.JLabel Scale;
    private javax.swing.JButton calculate_root;
    private javax.swing.JTextArea display_chords;
    private javax.swing.JTable display_table;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JComboBox scale_selector;
    private javax.swing.JTable viewprogressiontable;
    // End of variables declaration//GEN-END:variables
}
